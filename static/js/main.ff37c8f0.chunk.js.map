{"version":3,"sources":["Components/Filter/Filter.module.css","Components/Loader/preloader.module.css","reportWebVitals.js","Redux/typeAction.js","Redux/filmsReduser.js","Redux/headerReducer.js","Redux/favouritesReduser.js","Redux/filterReduser.js","Redux/storeRedux.js","API/API.js","Components/Loader/Loader.js","Components/Header/Header.js","Redux/actions.js","App.js","index.js"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","SHOW_FILMS","SHOW_LOADING","HIDE_LOADING","HANDLER_INPUT","GET_GENRES","SET_FAVOURITE_FILMS","DELETE_FAVOURITE_FILMS","SET_SELECTED_FILM_ID","DELETE_SELECTED_FILM_ID","initialState","pagesCount","films","isLoading","currentPage","selectedMovie","searchTest","favouriteFilms","genres","countries","rating","fromYear","toYear","persistConfig","key","storage","whitelist","reducers","combineReducers","state","action","type","payload","header","text","filter","persistReducer","film","filmId","store","createStore","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","persistor","persistStore","axios","baseURL","headers","Loader","className","role","Header","history","useHistory","useState","handler","setHandler","useSelector","dispatch","useDispatch","submitForm","e","value","preventDefault","push","to","onSubmit","placeholder","onChange","target","onClick","App","console","log","process","ReactDOM","render","basename","document","getElementById"],"mappings":"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","file":"static/js/main.ff37c8f0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter_block\":\"Filter_filter_block__3kjbO\",\"listGroup\":\"Filter_listGroup__gtJto\",\"accordionButton\":\"Filter_accordionButton__1yZ1u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"preloader_preloader__2se3H\"};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const SHOW_FILMS = \"SHOW_FILMS\";\r\nexport const SHOW_LOADING = 'SHOW_LOADING';\r\nexport const HIDE_LOADING = 'HIDE_LOADING';\r\nexport const HANDLER_INPUT = 'HANDLER_INPUT'\r\nexport const GET_GENRES = 'GET_GENRES'\r\nexport const SET_SELECTED_FILTER = 'SET_SELECTED_FILTER'\r\nexport const SET_FAVOURITE_FILMS = 'SET_FAVOURITE_FILMS'\r\nexport const DELETE_FAVOURITE_FILMS = 'DELETE_FAVOURITE_FILMS'\r\nexport const SET_SELECTED_FILM_ID = 'SET_SELECTED_FILM_ID'\r\nexport const DELETE_SELECTED_FILM_ID = 'DELETE_SELECTED_FILM_ID'\r\nexport const GET_VIDEO = 'GET_VIDEO'\r\nexport const API_KEY = \"303097b4-2b0a-46a5-8aae-4a1137273ff1\";\r\n\r\n","import {SHOW_LOADING, HIDE_LOADING, SHOW_FILMS, SET_SELECTED_FILM_ID, DELETE_SELECTED_FILM_ID} from \"./typeAction\";\r\n\r\nlet initialState = {\r\n    pagesCount: null,\r\n    films: [],\r\n    isLoading: false,\r\n    currentPage: 1,\r\n    selectedMovie: null\r\n}\r\n\r\nexport const filmsReduser = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case SHOW_FILMS:\r\n            return {\r\n                ...state,\r\n                films: action.payload.films,\r\n                pagesCount: action.payload.pagesCount,\r\n                currentPage: action.payload.currentPage,\r\n            }\r\n        case SHOW_LOADING:\r\n            return {\r\n                ...state,\r\n                isLoading : true\r\n            }\r\n        case HIDE_LOADING:\r\n            return {\r\n                ...state,\r\n                isLoading : false\r\n            }\r\n        case SET_SELECTED_FILM_ID:\r\n            return {\r\n                ...state,\r\n                selectedMovie: action.payload\r\n            }\r\n        case DELETE_SELECTED_FILM_ID:\r\n            return {\r\n                ...state,\r\n                selectedMovie: null\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import { HANDLER_INPUT } from \"./typeAction\";\r\n\r\nlet initialState = {\r\n    searchTest: \"\",\r\n};\r\n\r\nexport const headerReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case HANDLER_INPUT:\r\n            return {\r\n                ...state,\r\n                searchTest: action.text,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import {DELETE_FAVOURITE_FILMS, SET_FAVOURITE_FILMS} from \"./typeAction\";\r\n\r\n\r\nlet initialState = {\r\n    favouriteFilms: [],\r\n}\r\n\r\nexport const favouriteReduser = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case SET_FAVOURITE_FILMS:\r\n            return {\r\n                ...state,\r\n                favouriteFilms: [...state.favouriteFilms, action.payload],\r\n            }\r\n        case DELETE_FAVOURITE_FILMS:\r\n            return {\r\n                ...state,\r\n                favouriteFilms: [...state.favouriteFilms.filter(film=>film.filmId !== action.payload.filmId)],\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {GET_GENRES} from \"./typeAction\";\r\n\r\n\r\nconst initialState = {\r\n    genres: [],\r\n    countries: [],\r\n    rating: null,\r\n    fromYear: null,\r\n    toYear: null,\r\n}\r\n\r\nexport const filterReduser = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_GENRES:\r\n            return {\r\n                ...state,\r\n                genres: action.genres,\r\n                countries: action.countries\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import { applyMiddleware, combineReducers, compose } from \"redux\";\r\nimport { createStore } from \"redux\";\r\nimport thunk from 'redux-thunk'\r\nimport { filmsReduser } from \"./filmsReduser\";\r\nimport {headerReducer} from \"./headerReducer\";\r\nimport {favouriteReduser} from \"./favouritesReduser\";\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage'\r\nimport {filterReduser} from \"./filterReduser\";\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    whitelist: ['favouriteFilms']\r\n};\r\n\r\nlet reducers = combineReducers({\r\n    films : filmsReduser,\r\n    header: headerReducer,\r\n    filter: filterReduser,\r\n    favouriteFilms: persistReducer(persistConfig, favouriteReduser),\r\n})\r\n\r\nlet store = createStore(reducers,\r\n    compose(\r\n        applyMiddleware(\r\n            thunk\r\n        ),\r\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    ));\r\n\r\nexport const persistor = persistStore(store);\r\nexport default store;\r\n","import * as axios from \"axios\";\r\nimport { API_KEY } from \"../Redux/typeAction\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://kinopoiskapiunofficial.tech/api/v2.1/films/\",\r\n    headers: {\r\n        \"Content-Type\": \"aplication/json\",\r\n        \"X-API-KEY\": API_KEY,\r\n    },\r\n});\r\n\r\nexport const filmsAPI = {\r\n\r\n    getFilmsTOP100(currentPage=1) {\r\n        return instance.get(`top?type=TOP_100_POPULAR_FILMS&page=${currentPage}`);\r\n    },\r\n    getAwaitFilms(currentPage) {\r\n        return instance.get(`top?type=TOP_AWAIT_FILMS&page=${currentPage}`);\r\n\r\n    },\r\n    getFilmsFromSearch(inputText, currentPage) {\r\n        return instance.get(\r\n            `search-by-keyword?keyword=${inputText}&page=${currentPage}`\r\n        );\r\n    },\r\n    getListGenreAndCountry (){\r\n        return instance.get(`filters`);\r\n    },\r\n    getFilteredParams (filteredParams, currentPage){\r\n        return instance.get(`search-by-filters?${filteredParams}&page=${currentPage}`)\r\n    },\r\n    getFilmsById(id){\r\n        return instance.get(`${id}`)\r\n    }\r\n};\r\n","import React from \"react\"\r\n\r\nexport const Loader = () => {\r\n    return (\r\n        <>\r\n            <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\r\n            <span className=\"visually-hidden\">Loading...</span>\r\n        </>\r\n    )\r\n}\r\n","import React, {useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useHistory} from \"react-router\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {handlerInput} from \"../../Redux/actions\";\r\nimport {Loader} from \"../Loader/Loader\";\r\n\r\nexport const Header = () => {\r\n    let history = useHistory();\r\n    const [handler, setHandler] = useState('');\r\n    const isLoading = useSelector(state => state.films.isLoading)\r\n    const dispatch = useDispatch();\r\n\r\n    const submitForm = (e, value) => {\r\n        e.preventDefault();\r\n        dispatch(handlerInput(value));\r\n        history.push(`/film/${value}`)\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <nav className=\"navbar navbar-dark bg-dark\">\r\n                <div className=\"container-fluid d-flex justify-content-center\">\r\n                    <ul className=\"nav nav-pills nav-fill\">\r\n                        <li className=\"nav-item\">\r\n                            <NavLink to=\"/top100\" className=\"btn btn-primary\">Топ 100 фильмов</NavLink>\r\n                        </li>\r\n                    </ul>\r\n                    <form\r\n                        className=\"d-flex p-3\"\r\n                        onSubmit={(e) => {\r\n                            submitForm(e, handler);\r\n                        }}\r\n                    >\r\n                        <input\r\n                            className=\"form-control me-2\"\r\n                            type=\"search\"\r\n                            placeholder=\"Введите название фильма\"\r\n                            value={handler}\r\n                            onChange={(e) => {\r\n                                setHandler(e.target.value);\r\n                            }}\r\n                        />\r\n                        <button\r\n                            className=\"btn btn-outline-success\"\r\n                            type=\"button\"\r\n                            onClick={(e) => submitForm(e, handler)}\r\n                        >\r\n                            {isLoading ? <Loader/> : \"Поиск\"}\r\n                        </button>\r\n                    </form>\r\n                    <NavLink to=\"/favourite\" className=\"btn btn-primary\">Мои любимые фильмы</NavLink>\r\n\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import {filmsAPI} from \"../API/API\";\r\nimport {\r\n    SHOW_FILMS,\r\n    GET_GENRES,\r\n    HANDLER_INPUT,\r\n    HIDE_LOADING,\r\n    SHOW_LOADING, SET_FAVOURITE_FILMS, DELETE_FAVOURITE_FILMS, SET_SELECTED_FILM_ID, GET_VIDEO, DELETE_SELECTED_FILM_ID,\r\n} from \"./typeAction\";\r\n\r\n\r\nexport const showLoading = () => ({type: SHOW_LOADING});\r\nexport const hideLoading = () => ({type: HIDE_LOADING});\r\n\r\nexport const handlerInput = (text) => ({type: HANDLER_INPUT, text});\r\n\r\nexport const setGenresAndCountries = (genres, countries) => ({\r\n    type: GET_GENRES,\r\n    genres: genres,\r\n    countries: countries\r\n});\r\n\r\nexport const setFilms = (films, pagesCount, currentPage) => ({\r\n    type: SHOW_FILMS,\r\n    payload: {\r\n        films,\r\n        pagesCount,\r\n        currentPage\r\n    }\r\n})\r\n\r\nexport const getTop100Films = (currentPage) => (dispatch) => {\r\n    filmsAPI\r\n        .getFilmsTOP100(currentPage)\r\n        .then((response) => {\r\n            dispatch(setFilms(response.data.films, response.data.pagesCount, currentPage))\r\n        })\r\n        .catch(() => {\r\n            console.log(\"Error\");\r\n        });\r\n};\r\n\r\nexport const getAwaitFilms = (currentPage) => (dispatch) => {\r\n    filmsAPI\r\n        .getAwaitFilms(currentPage)\r\n        .then((response) => {\r\n            console.log(response.data)\r\n            dispatch(setFilms(response.data.films, response.data.pagesCount, currentPage))\r\n        })\r\n        .catch(() => {\r\n            console.log(\"Error\");\r\n        });\r\n};\r\n\r\nexport const getFilmsFromSearch = (query, currentPage) => (dispatch) => {\r\n    filmsAPI\r\n        .getFilmsFromSearch(query, currentPage)\r\n        .then((response) => {\r\n            dispatch(setFilms(response.data.films, response.data.pagesCount, currentPage))\r\n        })\r\n        .catch(() => {\r\n            console.log(\"Error\");\r\n        });\r\n};\r\n\r\nexport const getGenreAndCountries  = () => (dispatch) => {\r\n    filmsAPI.getListGenreAndCountry().then((response) => {\r\n        dispatch(setGenresAndCountries(response.data.genres, response.data.countries));\r\n    });\r\n};\r\n\r\nexport const setFilteredParams = (filteredParams, currentPage = 1) => (dispatch) => {\r\n    filmsAPI\r\n        .getFilteredParams(filteredParams, currentPage)\r\n        .then((response) => {\r\n            dispatch(setFilms(response.data.films, response.data.pagesCount, currentPage))\r\n        });\r\n};\r\n\r\nexport const setFavouritesFilms = (payload) => ({type: SET_FAVOURITE_FILMS, payload})\r\n\r\nexport const deleteFavouritesFilms = (payload) => ({type: DELETE_FAVOURITE_FILMS, payload})\r\n\r\nexport const setSelectedFilmById = (id) => (dispatch)=> {\r\n    filmsAPI.getFilmsById(id).then((response) => {\r\n        dispatch(setSelectedFilmByIdAC(response.data.data));\r\n    });\r\n}\r\n\r\nexport const setSelectedFilmByIdAC = (payload) => ({type: SET_SELECTED_FILM_ID, payload})\r\n\r\nexport const deleteSelectedFilmById = () => ({type: DELETE_SELECTED_FILM_ID})\r\n\r\n","import React, {memo, Suspense, useEffect} from \"react\";\nimport {HashRouter as Router, Route, Switch} from \"react-router-dom\";\nimport Filter from \"./Components/Filter/Filter\";\nimport SortFilmsOnGenre from \"./Components/ShowFilms/SortFilmsOnGenre\";\nimport {ShowOnSearchFilms} from \"./Components/ShowFilms/ShowOnSearchFilms\";\nimport {Header} from \"./Components/Header/Header\";\nimport {FilmsAwaitFilms} from \"./Components/ShowFilms/FilmsAwaitFilms\";\nimport {FilmsTop100} from \"./Components/ShowFilms/FilmsTop100\";\nimport DescriptionFilm from \"./Components/DescriptionFilm/DescriptionFilm\";\nimport {FavouriteFilms} from \"./Components/ShowFilms/FavoutiteFilms\";\n//const DescriptionFilm = React.lazy(() => import('./Components/DescriptionFilm/DescriptionFilm'))\n\nconst MemoShowOnSearchFilms = memo(ShowOnSearchFilms);\n\nconst App = () => {\n\n  return (\n      <Router>\n        <div className=\"App\">\n          <Header/>\n          <div className=\"row\">\n            {/*<div className=\"col-3\">*/}\n            {/*  <Filter/>*/}\n            {/*</div>*/}\n            <div className=\"col-9\">\n              {/*<Switch>*/}\n              {/*  <Route exact path={\"/\"} component={FilmsAwaitFilms}/>*/}\n              {/*  <Route path={\"/favourite\"} component={FavouriteFilms}/>*/}\n              {/*  <Route path={\"/cinemaInfo/:id\"} render={() => <DescriptionFilm/>}/>*/}\n              {/*  <Route path=\"/film/:name\" component={MemoShowOnSearchFilms}/>*/}\n              {/*  <Route path=\"/films/:filteredParams\" component={SortFilmsOnGenre}/>*/}\n              {/*  <Route path=\"/top100\" render={() => <FilmsTop100/>}/>*/}\n              {/*</Switch>*/}\n            </div>\n          </div>\n        </div>\n      </Router>\n  );\n};\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"../src/Redux/storeRedux\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from 'redux-persist/integration/react'\nimport {persistor} from \"./Redux/storeRedux\";\nimport {HashRouter} from \"react-router-dom\";\nimport App from \"./App\";\n\nconsole.log(process.env.PUBLIC_URL)\nReactDOM.render(\n    <HashRouter basename={process.env.PUBLIC_URL} >\n        <Provider store={store}>\n            <PersistGate  persistor={persistor}>\n                <App />\n            </PersistGate>\n        </Provider>\n    </HashRouter>,\n    document.getElementById(\"root\")\n\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}