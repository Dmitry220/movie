{"version":3,"sources":["reportWebVitals.js","Redux/typeAction.js","Redux/filmsReduser.js","Redux/headerReducer.js","Redux/favouritesReduser.js","Redux/filterReduser.js","Redux/themeReduser.js","Redux/storeRedux.js","API/API.js","Redux/actions.js","Redux/selectors.js","Components/Filter/Filter.js","Components/Loader/Preloader.js","Components/Films/CardFilm.js","Components/Films/Films.js","Components/ShowFilms/SortFilmsOnGenre.js","Components/ShowFilms/ShowOnSearchFilms.js","Components/Header/Header.js","Components/ShowFilms/FilmsAwaitFilms.js","Components/ShowFilms/FilmsTop100.js","Components/DescriptionFilm/DescriptionFilm.js","Components/ShowFilms/FavoutiteFilms.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","SHOW_FILMS","SHOW_LOADING","HIDE_LOADING","HANDLER_INPUT","GET_GENRES","SET_FAVOURITE_FILMS","DELETE_FAVOURITE_FILMS","SET_SELECTED_FILM_ID","DELETE_SELECTED_FILM_ID","CHANGE_THEME","initialState","pagesCount","films","isLoading","currentPage","selectedMovie","isResponse","searchTest","favouriteFilms","genres","countries","rating","fromYear","toYear","darkTheme","persistConfig","key","storage","whitelist","reducers","combineReducers","state","action","type","payload","header","text","filter","persistReducer","film","filmId","theme","store","createStore","compose","applyMiddleware","thunk","persistor","persistStore","instance","axios","baseURL","headers","filmsAPI","get","inputText","filteredParams","console","log","id","showLoading","hideLoading","setFilms","getTop100Films","dispatch","response","data","catch","getAwaitFilms","getFilmsFromSearch","query","getGenreAndCountries","setFilteredParams","status","setSelectedFilmByIdAC","darkThemeSelector","Option","Select","SubMenu","Menu","Filter","useDispatch","useSelector","year","Date","getFullYear","useState","selectedGenre","setSelectedGenre","selectedCountry","setSelectedCountry","min","max","selectedYear","setSelectedYear","selectedRating","setSelectedRating","order","setOrder","useEffect","prev","mode","style","height","icon","FilterOutlined","title","showSearch","width","placeholder","optionFilterProp","onChange","value","listHeight","filterOption","input","option","children","toLowerCase","indexOf","map","g","genre","RocketOutlined","c","country","CalendarOutlined","paddingLeft","trackStyle","backgroundColor","handleStyle","borderColor","range","defaultValue","justify","align","paddingRight","paddingBottom","className","StarOutlined","UpSquareOutlined","el","marginTop","block","to","join","Preloader","antIcon","LoadingOutlined","fontSize","spin","indicator","Meta","Card","CardFilm","nameRu","posterUrlPreview","hoverable","cover","src","description","some","item","danger","ghost","onClick","primary","Films","onPageChanged","length","f","padding","paddingTop","total","showSizeChanger","defaultCurrent","SortFilmsGenres","useParams","pageNumber","ShowOnSearchFilms","props","name","Header","Input","Search","history","useHistory","Layout","searchValue","setSearchValue","span","Item","display","alignItems","onFinish","push","e","target","htmlFor","size","checked","FilmsAwaitFilms","FilmsTop100","DescriptionFilm","selectedFilm","setSelectedFilmById","posterUrl","disabled","count","slogan","filmLength","ratingAgeLimits","FavouriteFilms","MemoShowOnSearchFilms","memo","MemoFilmsTop100","MemoFilmsAwaitFilms","MemoFavouriteFilms","MemoDescriptionFilm","MemoSortFilmsOnGenre","SortFilmsOnGenre","Content","Sider","Footer","App","margin","minHeight","exact","path","component","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.dd871c71.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const SHOW_FILMS = \"SHOW_FILMS\";\r\nexport const SHOW_LOADING = 'SHOW_LOADING';\r\nexport const HIDE_LOADING = 'HIDE_LOADING';\r\nexport const HANDLER_INPUT = 'HANDLER_INPUT'\r\nexport const GET_GENRES = 'GET_GENRES'\r\nexport const SET_SELECTED_FILTER = 'SET_SELECTED_FILTER'\r\nexport const SET_FAVOURITE_FILMS = 'SET_FAVOURITE_FILMS'\r\nexport const DELETE_FAVOURITE_FILMS = 'DELETE_FAVOURITE_FILMS'\r\nexport const SET_SELECTED_FILM_ID = 'SET_SELECTED_FILM_ID'\r\nexport const DELETE_SELECTED_FILM_ID = 'DELETE_SELECTED_FILM_ID'\r\nexport const GET_VIDEO = 'GET_VIDEO'\r\nexport const CHANGE_THEME = 'CHANGE_THEME'\r\nexport const API_KEY = \"303097b4-2b0a-46a5-8aae-4a1137273ff1\";\r\n\r\n","import {\r\n    SHOW_LOADING,\r\n    HIDE_LOADING,\r\n    SHOW_FILMS,\r\n    SET_SELECTED_FILM_ID,\r\n    DELETE_SELECTED_FILM_ID,\r\n} from \"./typeAction\";\r\n\r\nlet initialState = {\r\n    pagesCount: null,\r\n    films: [],\r\n    isLoading: false,\r\n    currentPage: 1,\r\n    selectedMovie: null,\r\n    isResponse: false\r\n}\r\n\r\nexport const filmsReduser = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case SHOW_FILMS:\r\n            return {\r\n                ...state,\r\n                films: action.payload.films,\r\n                pagesCount: action.payload.pagesCount,\r\n                currentPage: action.payload.currentPage,\r\n            }\r\n        case SHOW_LOADING:\r\n            return {\r\n                ...state,\r\n                isLoading : true\r\n            }\r\n        case HIDE_LOADING:\r\n            return {\r\n                ...state,\r\n                isLoading : false\r\n            }\r\n        case SET_SELECTED_FILM_ID:\r\n            return {\r\n                ...state,\r\n                selectedMovie: action.payload\r\n            }\r\n        case DELETE_SELECTED_FILM_ID:\r\n            return {\r\n                ...state,\r\n                selectedMovie: null\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import { HANDLER_INPUT } from \"./typeAction\";\r\n\r\nlet initialState = {\r\n    searchTest: \"\",\r\n};\r\n\r\nexport const headerReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case HANDLER_INPUT:\r\n            return {\r\n                ...state,\r\n                searchTest: action.text,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import {DELETE_FAVOURITE_FILMS, SET_FAVOURITE_FILMS} from \"./typeAction\";\r\n\r\n\r\nlet initialState = {\r\n    favouriteFilms: [],\r\n}\r\n\r\nexport const favouriteReduser = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case SET_FAVOURITE_FILMS:\r\n            return {\r\n                ...state,\r\n                favouriteFilms: [...state.favouriteFilms, action.payload],\r\n            }\r\n        case DELETE_FAVOURITE_FILMS:\r\n            return {\r\n                ...state,\r\n                favouriteFilms: [...state.favouriteFilms.filter(film=>film.filmId !== action.payload.filmId)],\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {GET_GENRES} from \"./typeAction\";\r\n\r\n\r\nconst initialState = {\r\n    genres: [],\r\n    countries: [],\r\n    rating: null,\r\n    fromYear: null,\r\n    toYear: null,\r\n}\r\n\r\nexport const filterReduser = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_GENRES:\r\n            return {\r\n                ...state,\r\n                genres: action.genres,\r\n                countries: action.countries\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {CHANGE_THEME} from \"./typeAction\";\r\n\r\nlet initialState = {\r\n    darkTheme: false,\r\n};\r\n\r\nexport const themeReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case CHANGE_THEME:\r\n            return {\r\n                ...state,\r\n                darkTheme: !state.darkTheme,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { applyMiddleware, combineReducers, compose } from \"redux\";\r\nimport { createStore } from \"redux\";\r\nimport thunk from 'redux-thunk'\r\nimport { filmsReduser } from \"./filmsReduser\";\r\nimport {headerReducer} from \"./headerReducer\";\r\nimport {favouriteReduser} from \"./favouritesReduser\";\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage'\r\nimport {filterReduser} from \"./filterReduser\";\r\nimport {themeReducer} from \"./themeReduser\";\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    whitelist: ['favouriteFilms', 'theme']\r\n};\r\n\r\nlet reducers = combineReducers({\r\n    films : filmsReduser,\r\n    header: headerReducer,\r\n    filter: filterReduser,\r\n    favouriteFilms: persistReducer(persistConfig, favouriteReduser),\r\n    theme: persistReducer(persistConfig, themeReducer)\r\n})\r\n\r\nconst store = createStore(reducers,\r\n    compose(\r\n        applyMiddleware(\r\n            thunk\r\n        ),\r\n        // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    ));\r\n\r\nexport const persistor = persistStore(store);\r\nexport default store;\r\n","import * as axios from \"axios\";\r\nimport { API_KEY } from \"../Redux/typeAction\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://kinopoiskapiunofficial.tech/api/v2.1/films/\",\r\n    headers: {\r\n        \"Content-Type\": \"aplication/json\",\r\n        \"X-API-KEY\": API_KEY,\r\n    },\r\n});\r\n\r\nexport const filmsAPI = {\r\n\r\n    getFilmsTOP100(currentPage=1) {\r\n        return instance.get(`top?type=TOP_100_POPULAR_FILMS&page=${currentPage}`);\r\n    },\r\n    getAwaitFilms(currentPage) {\r\n        return instance.get(`top?type=TOP_AWAIT_FILMS&page=${currentPage}`);\r\n\r\n    },\r\n    getFilmsFromSearch(inputText, currentPage) {\r\n        return instance.get(\r\n            `search-by-keyword?keyword=${inputText}&page=${currentPage}`\r\n        );\r\n    },\r\n    getListGenreAndCountry (){\r\n        return instance.get(`filters`);\r\n    },\r\n    // return instance.get(`search-by-filters?order=YEAR&country=${idCountry}&genre=${idGenre}\r\n    //     &ratingFrom=${ratingFrom}&ratingTo=${ratingTo}&yearFrom=${yearFrom}&yearTo=${yearTo}&page=${currentPage}`)\r\n    getFilteredParams (filteredParams, currentPage){\r\n        console.log(filteredParams)\r\n        return instance.get(`search-by-filters?${filteredParams}&page=${currentPage}`)\r\n    },\r\n    getFilmsById(id){\r\n        return instance.get(`${id}`)\r\n    }\r\n};\r\n","import {filmsAPI} from \"../API/API\";\r\nimport {\r\n    SHOW_FILMS,\r\n    GET_GENRES,\r\n    HANDLER_INPUT,\r\n    HIDE_LOADING,\r\n    SHOW_LOADING,\r\n    SET_FAVOURITE_FILMS,\r\n    DELETE_FAVOURITE_FILMS,\r\n    SET_SELECTED_FILM_ID,\r\n    GET_VIDEO,\r\n    DELETE_SELECTED_FILM_ID, CHANGE_THEME,\r\n} from \"./typeAction\";\r\n\r\n\r\nexport const showLoading = () => ({type: SHOW_LOADING});\r\nexport const hideLoading = () => ({type: HIDE_LOADING});\r\n\r\nexport const handlerInput = (text) => ({type: HANDLER_INPUT, text});\r\n\r\nexport const setGenresAndCountries = (genres, countries) => ({\r\n    type: GET_GENRES,\r\n    genres: genres,\r\n    countries: countries\r\n});\r\n\r\nexport const setFilms = (films, pagesCount, currentPage) => ({\r\n    type: SHOW_FILMS,\r\n    payload: {\r\n        films,\r\n        pagesCount,\r\n        currentPage\r\n    }\r\n})\r\n\r\nexport const getTop100Films = (currentPage) => (dispatch) => {\r\n    dispatch(showLoading())\r\n    filmsAPI\r\n        .getFilmsTOP100(currentPage)\r\n        .then((response) => {\r\n            dispatch(setFilms(response.data.films, response.data.pagesCount, currentPage))\r\n            dispatch(hideLoading())\r\n        })\r\n        .catch(() => {\r\n            console.log(\"Error\");\r\n        });\r\n};\r\n\r\nexport const getAwaitFilms = (currentPage) => (dispatch) => {\r\n    dispatch(showLoading())\r\n    filmsAPI\r\n        .getAwaitFilms(currentPage)\r\n        .then((response) => {\r\n            dispatch(setFilms(response.data.films, response.data.pagesCount, currentPage))\r\n            dispatch(hideLoading())\r\n        })\r\n        .catch(() => {\r\n            console.log(\"Error\");\r\n        });\r\n};\r\n\r\nexport const getFilmsFromSearch = (query, currentPage) => (dispatch) => {\r\n    dispatch(showLoading())\r\n    filmsAPI\r\n        .getFilmsFromSearch(query, currentPage)\r\n        .then((response) => {\r\n            dispatch(setFilms(response.data.films, response.data.pagesCount, currentPage))\r\n            dispatch(hideLoading())\r\n        })\r\n        .catch(() => {\r\n            console.log(\"Error\");\r\n        });\r\n};\r\n\r\nexport const getGenreAndCountries  = () => (dispatch) => {\r\n    filmsAPI.getListGenreAndCountry().then((response) => {\r\n        dispatch(setGenresAndCountries(response.data.genres, response.data.countries));\r\n    });\r\n};\r\n\r\nexport const setFilteredParams = (filteredParams, currentPage = 1) => (dispatch) => {\r\n    dispatch(showLoading())\r\n    filmsAPI\r\n        .getFilteredParams(filteredParams, currentPage)\r\n        .then((response) => {\r\n            if (response.status === 200) {\r\n                dispatch(setFilms(response.data.films, response.data.pagesCount, currentPage))\r\n                dispatch(hideLoading())\r\n            }\r\n        })\r\n        .catch(() => {\r\n            dispatch(setFilms([]))\r\n            dispatch(hideLoading())\r\n    });\r\n};\r\n\r\nexport const setFavouritesFilms = (payload) => ({type: SET_FAVOURITE_FILMS, payload})\r\n\r\nexport const deleteFavouritesFilms = (payload) => ({type: DELETE_FAVOURITE_FILMS, payload})\r\n\r\nexport const setSelectedFilmById = (id) => (dispatch)=> {\r\n    dispatch(showLoading())\r\n    filmsAPI.getFilmsById(id).then((response) => {\r\n        dispatch(setSelectedFilmByIdAC(response.data.data));\r\n        dispatch(hideLoading())\r\n    });\r\n}\r\n\r\nexport const setSelectedFilmByIdAC = (payload) => ({type: SET_SELECTED_FILM_ID, payload})\r\n\r\nexport const deleteSelectedFilmById = () => ({type: DELETE_SELECTED_FILM_ID})\r\n\r\nexport const changeTheme = () => ({type: CHANGE_THEME})\r\n\r\n\r\n","export const darkThemeSelector = (state) => {\r\n    return state.theme.darkTheme\r\n}\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getGenreAndCountries} from \"../../Redux/actions\";\r\nimport {FilterOutlined, StarOutlined, CalendarOutlined, RocketOutlined, UpSquareOutlined} from '@ant-design/icons';\r\nimport {Slider, InputNumber, Row, Menu, Select, Button} from 'antd';\r\nimport {Link} from \"react-router-dom\";\r\nimport {darkThemeSelector} from \"../../Redux/selectors\";\r\n\r\nconst {Option} = Select;\r\nconst {SubMenu} = Menu;\r\n\r\nconst Filter = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const genres = useSelector((state) => state.filter.genres);\r\n    const countries = useSelector((state) => state.filter.countries);\r\n    let currentTime = new Date()\r\n    let year = currentTime.getFullYear();\r\n    const darkTheme = useSelector(darkThemeSelector);\r\n    const [filteredParams, setFilteredParams] = useState([]);\r\n    const [selectedGenre, setSelectedGenre] = useState('')\r\n    const [selectedCountry, setSelectedCountry] = useState('')\r\n    const [selectedYear, setSelectedYear] = useState({min: 1880, max: year})\r\n    const [selectedRating, setSelectedRating] = useState({min: 0, max: 10})\r\n    const [order, setOrder] = useState()\r\n    const listSort = ['По году', 'По рейтингу']\r\n\r\n    const yearSliderOnChange = value => {\r\n        if (value[0] < value[1]) {\r\n            setSelectedYear({min: value[0], max: value[1]});\r\n        }\r\n    }\r\n    const yearInputMaxOnChange = value => {\r\n        if (selectedRating.min < value) {\r\n            setSelectedYear({...selectedYear, max: value});\r\n        }\r\n    }\r\n    const yearInputMinOnChange = value => {\r\n        if (selectedRating.max > value) {\r\n            setSelectedYear({...selectedYear, min: value});\r\n        }\r\n    }\r\n    const ratingSliderOnChange = value => {\r\n        if (value[0] < value[1]) {\r\n            setSelectedRating({min: value[0], max: value[1]});\r\n        }\r\n    }\r\n    const ratingInputMaxOnChange = value => {\r\n        if (selectedRating.min < value) {\r\n            setSelectedRating({...selectedRating, max: value});\r\n        }\r\n    }\r\n    const ratingInputMinOnChange = value => {\r\n        if (selectedRating.max > value) {\r\n            setSelectedRating({...selectedRating, min: value});\r\n        }\r\n    }\r\n    const onSortTypeChange = value => {\r\n        if (value === 'По году') setOrder('YEAR')\r\n        else if (value === 'По рейтингу') setOrder('RATING');\r\n    }\r\n    const onCountryChange = value => {\r\n        setSelectedCountry(value)\r\n    }\r\n    const onGenreChange = value => {\r\n        setSelectedGenre(value)\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(getGenreAndCountries());\r\n    }, [dispatch]);\r\n    useEffect(() => {\r\n        setFilteredParams(prev => [...prev,\r\n            order && `order=${order}`,\r\n            selectedGenre && `&genre=${selectedGenre}`,\r\n            selectedCountry && `&country=${selectedCountry}`,\r\n            `&ratingFrom=${selectedRating.min}`,\r\n            `&ratingTo=${selectedRating.max}`,\r\n            `&yearFrom=${selectedYear.min}`,\r\n            `&yearTo=${selectedYear.max}`,\r\n        ])\r\n        return () => {\r\n            setFilteredParams([]);\r\n        }\r\n    }, [selectedGenre, selectedCountry, selectedRating.min, selectedRating.max, selectedYear.min, selectedYear.max, order])\r\n\r\n    return (\r\n        <Menu\r\n            mode=\"inline\"\r\n            theme={darkTheme ? 'dark':'light'}\r\n            style={{height: '100%'}}\r\n        >\r\n            <SubMenu key=\"sub1\" icon={<FilterOutlined/>} title=\"Жанры\">\r\n                <Select\r\n                    showSearch\r\n                    style={{width: 300}}\r\n                    placeholder=\"Выберите жанр\"\r\n                    optionFilterProp=\"children\"\r\n                    onChange={onGenreChange}\r\n                    listHeight={500}\r\n                    filterOption={(input, option) =>\r\n                        option.children.toLowerCase().indexOf(input.toLowerCase()) === 0\r\n                    }\r\n                >\r\n                    {genres.map((g) => {\r\n                        return (\r\n                            <Option\r\n                                key={g.id}\r\n\r\n                            >\r\n                                {g.genre}\r\n                            </Option>\r\n                        );\r\n                    })}\r\n                </Select>\r\n            </SubMenu>\r\n            <SubMenu key=\"sub2\" icon={<RocketOutlined/>} title=\"Страны\">\r\n                <Select\r\n                    showSearch\r\n                    style={{width: 300}}\r\n                    listHeight={500}\r\n                    placeholder=\"Введите название страны\"\r\n                    optionFilterProp=\"children\"\r\n                    onChange={onCountryChange}\r\n                    filterOption={(input, option) =>\r\n                        option.children.toLowerCase().indexOf(input.toLowerCase()) === 0\r\n                    }\r\n                >\r\n                    {countries.map((c) => {\r\n                        return (\r\n                            <Option\r\n                                key={c.id}\r\n                                value={c.id}\r\n                            >\r\n                                {c.country}\r\n                            </Option>\r\n                        );\r\n                    })}\r\n                </Select>\r\n            </SubMenu>\r\n            <SubMenu key=\"sub3\" icon={<CalendarOutlined/>} title=\"Год\">\r\n                <Slider min={1880} max={year}\r\n                        style={{paddingLeft: 5}}\r\n                        trackStyle={{backgroundColor: 'red', height: 20}}\r\n                        handleStyle={{borderColor: 'red', height: 20}}\r\n                        range={true}\r\n                        onChange={yearSliderOnChange}\r\n                        defaultValue={[selectedYear.min, selectedYear.max]}\r\n                        value={[selectedYear.min, selectedYear.max]}\r\n                />\r\n                <Row justify=\"space-around\" align=\"middle\" style={{paddingLeft: 5, paddingRight: 5, paddingBottom: 15}}>\r\n                    <InputNumber\r\n                        className=\"min-input-main\"\r\n                        min={1880}\r\n                        max={year}\r\n                        value={selectedYear.min}\r\n                        onChange={yearInputMinOnChange}\r\n                    />\r\n                    <div> до</div>\r\n                    <InputNumber\r\n                        className=\"min-input-main\"\r\n                        min={1880}\r\n                        max={year}\r\n                        value={selectedYear.max}\r\n                        onChange={yearInputMaxOnChange}\r\n                    />\r\n                </Row>\r\n            </SubMenu>\r\n            <SubMenu key=\"sub4\" icon={<StarOutlined/>} title=\"Рейтинг\">\r\n                <Slider min={0} max={10}\r\n                        style={{paddingLeft: 5}}\r\n                        trackStyle={{backgroundColor: 'red', height: 20}}\r\n                        handleStyle={{borderColor: 'red', height: 20}}\r\n                        range={true}\r\n                        onChange={ratingSliderOnChange}\r\n                        defaultValue={[selectedRating.min, selectedRating.max]}\r\n                        value={[selectedRating.min, selectedRating.max]}\r\n                />\r\n                <Row justify=\"space-around\" align=\"middle\" style={{paddingLeft: 5, paddingRight: 5, paddingBottom: 15}}>\r\n                    <InputNumber\r\n                        className=\"min-input-main\"\r\n                        min={0}\r\n                        max={10}\r\n                        value={selectedRating.min}\r\n                        onChange={ratingInputMinOnChange}\r\n                    />\r\n                    <div> до</div>\r\n                    <InputNumber\r\n                        className=\"min-input-main\"\r\n                        min={0}\r\n                        max={10}\r\n                        value={selectedRating.max}\r\n                        onChange={ratingInputMaxOnChange}\r\n                    />\r\n                </Row>\r\n            </SubMenu>\r\n            <SubMenu key=\"sub5\" icon={<UpSquareOutlined/>} title=\"Сортирвока\">\r\n                <Select style={{width: '100%'}} defaultValue={'По году'} onChange={onSortTypeChange}>\r\n                    {\r\n                        listSort.map(el => (\r\n                            <Option key={el}>{el}</Option>\r\n                        ))\r\n                    }\r\n                </Select>\r\n            </SubMenu>\r\n            <Row justify={'center'} style={{marginTop: 10}}>\r\n                <Button type={darkTheme && \"primary\"} block><Link to={`/films/${filteredParams.join('')}`}>Отфильтровать</Link></Button>\r\n            </Row>\r\n        </Menu>\r\n    );\r\n};\r\n\r\nexport default Filter;\r\n","import React from \"react\";\r\nimport { Spin } from 'antd';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\n\r\nexport const Preloader = () => {\r\n    const antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\r\n    return (\r\n        <Spin indicator={antIcon} />\r\n    );\r\n};\r\n","import {Link, NavLink} from \"react-router-dom\";\r\nimport {deleteFavouritesFilms, setFavouritesFilms} from \"../../Redux/actions\";\r\nimport React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport './films.css'\r\nimport {Button, Card, Image} from 'antd';\r\nimport './../../Dark.css'\r\nimport {darkThemeSelector} from \"../../Redux/selectors\";\r\nconst {Meta} = Card;\r\n\r\nexport const CardFilm = ({film, filmId, nameRu, posterUrlPreview, favouriteFilms, rating}) => {\r\n    const dispatch = useDispatch();\r\n    const darkTheme = useSelector(darkThemeSelector);\r\n    return (\r\n        <div>\r\n            {/*<link to={`/cinemaInfo${filmId}`}>*/}\r\n            <Card\r\n                hoverable\r\n                className={darkTheme && 'card_dark'}\r\n\r\n                cover={<img src={posterUrlPreview}/>}\r\n            >\r\n                <Meta className={darkTheme && 'ant-card-meta-title'} title={nameRu} description={\r\n                    <div>\r\n                        {\r\n                            favouriteFilms.some((item) => item.filmId === filmId) ?\r\n                                <Button\r\n                                    danger\r\n                                    block\r\n                                    ghost\r\n                                    type={darkTheme ? \"dashed\":\"primary\"}\r\n                                    lime-7\r\n                                    onClick={() => dispatch(deleteFavouritesFilms(film))}>\r\n                                    Удалить из избранного\r\n                                </Button> :\r\n                                <Button\r\n                                    block\r\n                                    primary\r\n                                    ghost\r\n                                    type={darkTheme ? \"dashed\":\"primary\"}\r\n                                    onClick={() => dispatch(setFavouritesFilms(film))}>\r\n                                    Добавить в избранное\r\n                                </Button>\r\n                        }\r\n                    </div>\r\n\r\n                }\r\n                />\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getTop100Films} from \"../../Redux/actions\";\r\nimport {Preloader} from \"../Loader/Preloader\";\r\nimport {CardFilm} from \"./CardFilm\";\r\nimport {Col, Pagination, Row} from 'antd';\r\nimport 'antd/dist/antd.css';\r\n\r\n\r\nconst Films = ({films, currentPage, pagesCount, onPageChanged}) => {\r\n\r\n    console.log('Render Films')\r\n    const selectRating = (raiting) => {\r\n        if (raiting >= 9) return \"green\";\r\n        else if (raiting >= 7) return \"yellow\"\r\n        else if (raiting >= 5) return \"orange\";\r\n        else return \"red\";\r\n    }\r\n    const favouriteFilms = useSelector((state) => state.favouriteFilms.favouriteFilms)\r\n    const isLoading = useSelector(state => state.films.isLoading)\r\n\r\n    if (!films.length) {\r\n        return <h2 className={'text-white w-100 fontSize-24'}>По вашему запросу ничего не найдено!</h2>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Row justify=\"space-around\">\r\n            { isLoading ?  <Preloader /> :\r\n                films.map((f) => (\r\n                          <Col style={{width: '20%', padding: 30}} key={f.filmId}>\r\n                              <CardFilm\r\n                                  filmId={f.filmId}\r\n                                  film={f}\r\n                                  nameRu={f.nameRu}\r\n                                  posterUrlPreview={f.posterUrlPreview}\r\n                                  favouriteFilms={favouriteFilms}\r\n                                  rating={f.rating}\r\n                              />\r\n                          </Col>\r\n                      ))}\r\n            </Row>\r\n                <Row justify={'center'}>\r\n                    <Col style={{paddingTop: 70, paddingBottom: 70}}>\r\n                        <Pagination total={pagesCount*10} showSizeChanger={false}\r\n                                    defaultCurrent={currentPage} onChange={onPageChanged}/>\r\n                    </Col>\r\n                </Row>\r\n\r\n        </div>\r\n    );\r\n}\r\nexport default Films\r\n","import React, {memo, useEffect} from \"react\";\r\nimport Films from \"../Films/Films\";\r\n\r\nimport {useParams} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setFilteredParams} from \"../../Redux/actions\";\r\n\r\nconst SortFilmsGenres = () => {\r\n\r\n    const pagesCount = useSelector(state=>state.films.pagesCount);\r\n    const currentPage = useSelector(state=>state.films.currentPage);\r\n    const films = useSelector(state=>state.films.films);\r\n\r\n    const {filteredParams} = useParams();\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(()=>{\r\n        console.log(\"Screening of films by genre \")\r\n        dispatch(setFilteredParams(filteredParams))\r\n    },[filteredParams])\r\n\r\n    const onPageChanged = (pageNumber) => {\r\n        dispatch(setFilteredParams(filteredParams, pageNumber));\r\n    };\r\n\r\n    return (\r\n        <div className=\"container pt-5\">\r\n            <Films\r\n                films={films}\r\n                onPageChanged={onPageChanged}\r\n                pagesCount={pagesCount}\r\n                currentPage={currentPage}/>\r\n        </div>\r\n    );\r\n};\r\nexport default SortFilmsGenres;\r\n","import Films from \"../Films/Films\";\r\nimport {getFilmsFromSearch} from \"../../Redux/actions\";\r\nimport { useDispatch, useSelector} from \"react-redux\";\r\n\r\nimport React, {memo, useEffect} from \"react\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\nexport const ShowOnSearchFilms = (props) => {\r\n\r\n    const {name} = useParams();\r\n    const films = useSelector(state=> state.films.films)\r\n    const pagesCount = useSelector(state=> state.films.pagesCount)\r\n    const currentPage = useSelector(state=> state.films.currentPage)\r\n    const searchTest = useSelector(state=> state.header.searchTest);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(()=>{\r\n        dispatch(getFilmsFromSearch(name, 1));\r\n    },[dispatch,name])\r\n\r\n    let onPageChanged = (pageNumber) => {\r\n        dispatch(getFilmsFromSearch(searchTest, pageNumber));\r\n    };\r\n\r\n    console.log('Render Show Films By Search');\r\n    return (\r\n        <div className=\"container pt-5\">\r\n            <Films\r\n                films={films}\r\n                onPageChanged={onPageChanged}\r\n                pagesCount={pagesCount}\r\n                currentPage={currentPage}/>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n","import React, {useState} from \"react\";\r\nimport './header.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useHistory} from \"react-router\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {changeTheme, handlerInput} from \"../../Redux/actions\";\r\nimport { SearchOutlined } from '@ant-design/icons';\r\nimport {Col, Layout, Menu, Row, Input, Tooltip, Button, Switch, Form} from \"antd\";\r\nimport { AudioOutlined } from '@ant-design/icons';\r\nimport 'antd/dist/antd.css';\r\nimport { darkThemeSelector} from \"../../Redux/selectors\";\r\nimport './../../Dark.css'\r\nimport './header.css'\r\nconst {Search} = Input\r\n\r\n\r\nexport const Header = () => {\r\n\r\n    console.log('Render Header')\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const {Header} = Layout;\r\n    const [searchValue, setSearchValue] = useState('');\r\n    const darkTheme = useSelector(darkThemeSelector);\r\n\r\n    const onSearch = () => {\r\n        dispatch(handlerInput(searchValue));\r\n        history.push(`/film/${searchValue}`)\r\n    };\r\n\r\n    return (\r\n            <Header className={darkTheme ? 'header_dark': 'header'}>\r\n                <div className=\"logo\" />\r\n                <Row>\r\n                    <Col span={16}>\r\n                        <Menu\r\n                            theme={darkTheme ? 'dark':'light'}\r\n                            mode=\"horizontal\">\r\n                            <Menu.Item key=\"1\"><NavLink to=\"/top100\" className=\"btn btn-primary\">100 лучших фильмов</NavLink></Menu.Item>\r\n                            <Menu.Item key=\"2\"><NavLink to=\"/favourite\" className=\"btn btn-primary\">Мои любимые фильмы</NavLink></Menu.Item>\r\n                        </Menu>\r\n                    </Col>\r\n                    <Col span={5} style={{display:'flex', alignItems: 'center'}}>\r\n                        <Form onFinish={onSearch}>\r\n                            <Input  onChange={(e)=>setSearchValue(e.target.value)} placeholder=\"Введите название фильма\" className={'inputSearch'}/>\r\n                            <div className=\"search\"></div>\r\n                        </Form>\r\n\r\n                    </Col>\r\n                    <Col span={3}>\r\n                        <label htmlFor={'theme'}\r\n                               className={darkTheme ? 'textThemeDark' : 'textTheme'}>{!darkTheme ? 'Темная тема:' : 'Светлая тема:'} </label>\r\n                        <Switch id='theme' size=\"small\" checked={darkTheme} onChange={() => dispatch(changeTheme())}/>\r\n                    </Col>\r\n                </Row>\r\n            </Header>\r\n    );\r\n};\r\n\r\n","import React, {memo, useEffect} from \"react\";\r\nimport Films from \"../Films/Films\";\r\n\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getAwaitFilms} from \"../../Redux/actions\";\r\n\r\nexport const FilmsAwaitFilms = () => {\r\n    console.log('Render start page')\r\n\r\n\r\n    const pagesCount = useSelector(state => state.films.pagesCount);\r\n    const currentPage = useSelector(state => state.films.currentPage);\r\n    const films = useSelector(state => state.films.films);\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getAwaitFilms(currentPage));\r\n    }, [dispatch, currentPage])\r\n\r\n    const onPageChanged = (pageNumber) => {\r\n        dispatch(getAwaitFilms(pageNumber));\r\n    };\r\n\r\n    return (\r\n        <div className=\"container p-5\">\r\n            <Films\r\n                films={films}\r\n                onPageChanged={onPageChanged}\r\n                pagesCount={pagesCount}\r\n                currentPage={currentPage}/>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {memo, useEffect} from \"react\";\r\nimport Films from \"../Films/Films\";\r\nimport {getTop100Films} from \"../../Redux/actions\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Preloader} from \"../Loader/Preloader\";\r\n\r\nexport const FilmsTop100 = () => {\r\n    console.log('Render Top 100')\r\n    const currentPage = useSelector(state => state.films.currentPage)\r\n    const pagesCount = useSelector(state => state.films.pagesCount)\r\n    const films = useSelector(state => state.films.films)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(()=>{\r\n        dispatch(getTop100Films(currentPage))\r\n    },[currentPage])\r\n\r\n    const onPageChanged = (pageNumber) => {\r\n        dispatch(getTop100Films(pageNumber))\r\n    };\r\n    return (\r\n            <div className=\"container pt-5\">\r\n                    <Films\r\n                        films={films}\r\n                        onPageChanged={onPageChanged}\r\n                        pagesCount={pagesCount}\r\n                        currentPage={currentPage}/>\r\n            </div>\r\n    );\r\n};\r\n\r\n","import React, {useEffect} from \"react\";\r\nimport './descriptionFilm.css'\r\nimport {useParams} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {deleteSelectedFilmById, setSelectedFilmById} from \"../../Redux/actions\";\r\nimport {Preloader} from \"../Loader/Preloader\";\r\nimport {Col, Image, Rate, Row} from \"antd\";\r\n\r\nconst DescriptionFilm = () => {\r\n    const {id} = useParams();\r\n    const dispatch = useDispatch();\r\n    const selectedFilm = useSelector(state => state.films.selectedMovie);\r\n    const isLoading = useSelector(state => state.films.isLoading)\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(setSelectedFilmById(id))\r\n        return ()=>{\r\n            dispatch(deleteSelectedFilmById())\r\n        }\r\n    }, [id])\r\n\r\n    return (\r\n        <Row className=\"movie_top\">\r\n            {\r\n                isLoading ? <Preloader/> : selectedFilm && <div>\r\n                    <Row className=\"col-md-9 movie_box m-4\">\r\n                        <Col className=\"gutter-row\" span={6}>\r\n                            <Image src={selectedFilm.posterUrl} width={250}/>\r\n                            <Rate disabled defaultValue={selectedFilm.rating} count={10} />\r\n                        </Col>\r\n                        <Col className=\"gutter-row\" span={18} >\r\n                            <p className=\"movie_option\"><strong>Название: </strong>{selectedFilm.nameRu}</p>\r\n                            <p className=\"movie_option\"><strong>Слоган\r\n                                ограничения: </strong>{selectedFilm.slogan || 'Без слогана'}</p>\r\n                            <p className=\"movie_option\"><strong>Продолжительность: </strong>{selectedFilm.filmLength}\r\n                            </p>\r\n                            <p className=\"movie_option\"><strong>Страна: </strong>{selectedFilm.countries.map(c =>\r\n                                <span>{c.country} </span>)}</p>\r\n                            <p className=\"movie_option\"><strong>Год: </strong>{selectedFilm.year}</p>\r\n                            <p className=\"movie_option\"><strong>Жанр: </strong>{selectedFilm.genres.map(g =>\r\n                                <span>{g.genre} </span>)}</p>\r\n                            <p className=\"movie_option\"><strong>Возратсные\r\n                                ограничения: </strong>{selectedFilm.ratingAgeLimits}+</p>\r\n\r\n                        </Col>\r\n                    </Row>\r\n                    <Row justify={'center'}>\r\n                        <Col span={12}>\r\n                            <p className=\"description\">{selectedFilm.description}</p>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                </div>\r\n\r\n            }\r\n        </Row>\r\n    )\r\n}\r\nexport default DescriptionFilm\r\n","import React, {memo, useEffect} from \"react\";\r\nimport Films from \"../Films/Films\";\r\n// import { Pagination } from \"../Pagination/Pagination\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nexport const FavouriteFilms = () => {\r\n    const favouriteFilms = useSelector(state => state.favouriteFilms.favouriteFilms)\r\n    const dispatch = useDispatch();\r\n\r\n    const onPageChanged = (pageNumber) => {\r\n        //dispatch(getTop100Films(pageNumber))\r\n    };\r\n    return (\r\n        <div className=\"container pt-5\">\r\n            <Films films={favouriteFilms} pagesCount={1}/>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {memo} from \"react\";\nimport {HashRouter as Router, Link, Route, Switch, withRouter} from \"react-router-dom\";\nimport Filter from \"./Components/Filter/Filter\";\nimport SortFilmsOnGenre from \"./Components/ShowFilms/SortFilmsOnGenre\";\nimport {ShowOnSearchFilms} from \"./Components/ShowFilms/ShowOnSearchFilms\";\nimport {Header} from \"./Components/Header/Header\";\nimport {FilmsAwaitFilms} from \"./Components/ShowFilms/FilmsAwaitFilms\";\nimport {FilmsTop100} from \"./Components/ShowFilms/FilmsTop100\";\nimport DescriptionFilm from \"./Components/DescriptionFilm/DescriptionFilm\";\nimport {FavouriteFilms} from \"./Components/ShowFilms/FavoutiteFilms\";\nimport {Alert, Pagination} from \"antd\";\nimport { Layout, Menu, Breadcrumb } from 'antd';\nimport {useSelector} from \"react-redux\";\nimport {darkThemeSelector} from \"./Redux/selectors\";\nimport './Dark.css'\n\nconst MemoShowOnSearchFilms = memo(ShowOnSearchFilms);\nconst MemoFilmsTop100 = memo(FilmsTop100)\nconst MemoFilmsAwaitFilms= memo(FilmsAwaitFilms)\nconst MemoFavouriteFilms = memo(FavouriteFilms)\nconst MemoDescriptionFilm = memo(DescriptionFilm)\nconst MemoSortFilmsOnGenre = memo(SortFilmsOnGenre)\n\n\nconst { SubMenu } = Menu;\nconst { Content, Footer, Sider } = Layout;\n\n\nconst App = () => {\n  const darkTheme = useSelector(darkThemeSelector);\n  console.log(\"Render App\")\n  return (\n      <Router>\n        <Layout style={{height: '100vh' }}>\n          <Header />\n          <Content style={{ padding: '0 50px'}}className={darkTheme && 'layout_content_dark'} >\n            <Breadcrumb style={{ margin: '16px 0' }}>\n                <Breadcrumb.Item><Link to={'/'}>Главная</Link></Breadcrumb.Item>\n              {/*<Breadcrumb.Item>App</Breadcrumb.Item>*/}\n            </Breadcrumb>\n            <Layout className=\"site-layout-background\">\n              <Sider className=\"site-layout-background\" width={300}>\n                <Filter />\n              </Sider>\n              <Content style={{ minHeight: 280 }} className={darkTheme && 'contentDark'}>\n                <Switch>\n                  <Route exact path={\"/\"} component={MemoFilmsAwaitFilms} />\n                  <Route path={\"/favourite\"} component={MemoFavouriteFilms} />\n                  <Route path={\"/cinemaInfo/:id\"} render={() => <MemoDescriptionFilm/>} />\n                  <Route path=\"/film/:name\" component={MemoShowOnSearchFilms}/>\n                  <Route path=\"/films/:filteredParams\" component={MemoSortFilmsOnGenre} />\n                  <Route path=\"/top100\" render={() => <MemoFilmsTop100/>} />\n                </Switch>\n\n              </Content>\n            </Layout>\n          </Content>\n        </Layout>\n\n      </Router>\n\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"../src/Redux/storeRedux\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from 'redux-persist/integration/react'\nimport {persistor} from \"./Redux/storeRedux\";\nimport {HashRouter} from \"react-router-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <HashRouter  >\n        <Provider store={store}>\n            <PersistGate  persistor={persistor}>\n                <App />\n            </PersistGate>\n        </Provider>\n    </HashRouter>,\n    document.getElementById(\"root\")\n\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}