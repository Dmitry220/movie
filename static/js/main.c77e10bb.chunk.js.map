{"version":3,"sources":["Components/Loader/preloader.module.css","reportWebVitals.js","Redux/typeAction.js","Redux/filmsReduser.js","Redux/headerReducer.js","Redux/favouritesReduser.js","Redux/filterReduser.js","Redux/themeReduser.js","Redux/storeRedux.js","API/API.js","Redux/actions.js","Redux/selectors.js","Components/Filter/Filter.js","Components/Loader/Preloader.js","assets/img/defaultMovieImage.jpg","Components/Films/CardFilm.js","Components/Films/Films.js","Components/ShowFilms/SortFilmsOnGenre.js","Components/ShowFilms/ShowOnSearchFilms.js","Components/ShowFilms/FilmsAwaitFilms.js","Components/ShowFilms/FilmsTop100.js","Components/DescriptionFilm/DescriptionFilm.js","Components/ShowFilms/FavoutiteFilms.js","logo.svg","Components/Header/Header.js","App.js","index.js"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","SHOW_FILMS","SHOW_LOADING","HIDE_LOADING","HANDLER_INPUT","GET_GENRES","SET_FAVOURITE_FILMS","DELETE_FAVOURITE_FILMS","SET_SELECTED_FILM_ID","DELETE_SELECTED_FILM_ID","CHANGE_THEME","initialState","pagesCount","films","isLoading","currentPage","selectedMovie","isResponse","searchTest","favouriteFilms","genres","countries","rating","fromYear","toYear","darkTheme","persistConfig","key","storage","whitelist","persistConfigTheme","reducers","combineReducers","state","action","type","payload","header","text","filter","persistReducer","film","filmId","theme","store","createStore","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","persistor","persistStore","instance","axios","baseURL","headers","filmsAPI","get","inputText","filteredParams","console","log","id","showLoading","hideLoading","setFilms","getTop100Films","dispatch","response","data","catch","getAwaitFilms","getFilmsFromSearch","query","getGenreAndCountries","setFilteredParams","status","setSelectedFilmByIdAC","darkThemeSelector","Option","Select","SubMenu","Menu","Filter","useDispatch","useSelector","year","Date","getFullYear","useState","selectedGenre","setSelectedGenre","selectedCountry","setSelectedCountry","min","max","selectedYear","setSelectedYear","selectedRating","setSelectedRating","order","setOrder","useEffect","prev","mode","style","height","icon","FilterOutlined","title","showSearch","width","placeholder","optionFilterProp","onChange","value","listHeight","filterOption","input","option","children","toLowerCase","indexOf","map","g","genre","RocketOutlined","c","country","CalendarOutlined","paddingLeft","trackStyle","backgroundColor","handleStyle","borderColor","range","defaultValue","justify","align","paddingRight","paddingBottom","className","StarOutlined","UpSquareOutlined","el","marginTop","block","to","join","Preloader","antIcon","LoadingOutlined","fontSize","spin","preloader","indicator","CardFilm","Card","Meta","nameRu","posterUrlPreview","src","img","some","item","danger","ghost","onClick","primary","Films","onPageChanged","length","f","paddingTop","total","showSizeChanger","defaultCurrent","SortFilmsGenres","useParams","pageNumber","ShowOnSearchFilms","props","name","FilmsAwaitFilms","FilmsTop100","DescriptionFilm","selectedFilm","setSelectedFilmById","padding","md","lg","xl","posterUrl","slogan","filmLength","ratingAgeLimits","span","description","FavouriteFilms","Header","history","useHistory","Layout","searchValue","setSearchValue","position","zIndex","sm","xs","defaultSelectedKeys","overflowedIndicator","MenuOutlined","Item","count","offset","htmlFor","size","checked","onFinish","push","e","target","MemoShowOnSearchFilms","memo","MemoFilmsTop100","MemoFilmsAwaitFilms","MemoFavouriteFilms","MemoDescriptionFilm","MemoSortFilmsOnGenre","SortFilmsOnGenre","Content","Sider","Footer","App","matchMedia","matches","matchesMedia","setMatchesMedia","addEventListener","minHeight","background","top","left","trigger","breakpoint","collapsedWidth","exact","path","component","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.c77e10bb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"preloader_preloader__2se3H\"};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const SHOW_FILMS = \"SHOW_FILMS\";\r\nexport const SHOW_LOADING = 'SHOW_LOADING';\r\nexport const HIDE_LOADING = 'HIDE_LOADING';\r\nexport const HANDLER_INPUT = 'HANDLER_INPUT'\r\nexport const GET_GENRES = 'GET_GENRES'\r\nexport const SET_SELECTED_FILTER = 'SET_SELECTED_FILTER'\r\nexport const SET_FAVOURITE_FILMS = 'SET_FAVOURITE_FILMS'\r\nexport const DELETE_FAVOURITE_FILMS = 'DELETE_FAVOURITE_FILMS'\r\nexport const SET_SELECTED_FILM_ID = 'SET_SELECTED_FILM_ID'\r\nexport const DELETE_SELECTED_FILM_ID = 'DELETE_SELECTED_FILM_ID'\r\nexport const GET_VIDEO = 'GET_VIDEO'\r\nexport const CHANGE_THEME = 'CHANGE_THEME'\r\nexport const API_KEY = \"303097b4-2b0a-46a5-8aae-4a1137273ff1\";\r\n\r\n","import {\r\n    SHOW_LOADING,\r\n    HIDE_LOADING,\r\n    SHOW_FILMS,\r\n    SET_SELECTED_FILM_ID,\r\n    DELETE_SELECTED_FILM_ID,\r\n} from \"./typeAction\";\r\n\r\nlet initialState = {\r\n    pagesCount: null,\r\n    films: [],\r\n    isLoading: false,\r\n    currentPage: 1,\r\n    selectedMovie: null,\r\n    isResponse: false\r\n}\r\n\r\nexport const filmsReduser = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case SHOW_FILMS:\r\n            return {\r\n                ...state,\r\n                films: action.payload.films,\r\n                pagesCount: action.payload.pagesCount,\r\n                currentPage: action.payload.currentPage,\r\n            }\r\n        case SHOW_LOADING:\r\n            return {\r\n                ...state,\r\n                isLoading : true\r\n            }\r\n        case HIDE_LOADING:\r\n            return {\r\n                ...state,\r\n                isLoading : false\r\n            }\r\n        case SET_SELECTED_FILM_ID:\r\n            return {\r\n                ...state,\r\n                selectedMovie: action.payload\r\n            }\r\n        case DELETE_SELECTED_FILM_ID:\r\n            return {\r\n                ...state,\r\n                selectedMovie: null\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import { HANDLER_INPUT } from \"./typeAction\";\r\n\r\nlet initialState = {\r\n    searchTest: \"\",\r\n};\r\n\r\nexport const headerReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case HANDLER_INPUT:\r\n            return {\r\n                ...state,\r\n                searchTest: action.text,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import {DELETE_FAVOURITE_FILMS, SET_FAVOURITE_FILMS} from \"./typeAction\";\r\n\r\n\r\nlet initialState = {\r\n    favouriteFilms: [],\r\n}\r\n\r\nexport const favouriteReduser = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case SET_FAVOURITE_FILMS:\r\n            return {\r\n                ...state,\r\n                favouriteFilms: [...state.favouriteFilms, action.payload],\r\n            }\r\n        case DELETE_FAVOURITE_FILMS:\r\n            return {\r\n                ...state,\r\n                favouriteFilms: [...state.favouriteFilms.filter(film=>film.filmId !== action.payload.filmId)],\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {GET_GENRES} from \"./typeAction\";\r\n\r\n\r\nconst initialState = {\r\n    genres: [],\r\n    countries: [],\r\n    rating: null,\r\n    fromYear: null,\r\n    toYear: null,\r\n}\r\n\r\nexport const filterReduser = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_GENRES:\r\n            return {\r\n                ...state,\r\n                genres: action.genres,\r\n                countries: action.countries\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {CHANGE_THEME} from \"./typeAction\";\r\n\r\nlet initialState = {\r\n    darkTheme: false,\r\n};\r\n\r\nexport const themeReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case CHANGE_THEME:\r\n            return {\r\n                ...state,\r\n                darkTheme: !state.darkTheme,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { applyMiddleware, combineReducers, compose } from \"redux\";\r\nimport { createStore } from \"redux\";\r\nimport thunk from 'redux-thunk'\r\nimport { filmsReduser } from \"./filmsReduser\";\r\nimport {headerReducer} from \"./headerReducer\";\r\nimport {favouriteReduser} from \"./favouritesReduser\";\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage'\r\nimport {filterReduser} from \"./filterReduser\";\r\nimport {themeReducer} from \"./themeReduser\";\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    whitelist: ['favouriteFilms']\r\n};\r\nconst persistConfigTheme = {\r\n    key: 'theme',\r\n    storage,\r\n    whitelist: ['darkTheme']\r\n};\r\n\r\nlet reducers = combineReducers({\r\n    films : filmsReduser,\r\n    header: headerReducer,\r\n    filter: filterReduser,\r\n    favouriteFilms: persistReducer(persistConfig, favouriteReduser),\r\n    theme: persistReducer(persistConfigTheme, themeReducer)\r\n})\r\n\r\nconst store = createStore(reducers,\r\n    compose(\r\n        applyMiddleware(\r\n            thunk\r\n        ),\r\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    ));\r\n\r\nexport const persistor = persistStore(store);\r\nexport default store;\r\n","import * as axios from \"axios\";\r\nimport { API_KEY } from \"../Redux/typeAction\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://kinopoiskapiunofficial.tech/api/v2.1/films/\",\r\n    headers: {\r\n        \"Content-Type\": \"aplication/json\",\r\n        \"X-API-KEY\": API_KEY,\r\n    },\r\n});\r\n\r\nexport const filmsAPI = {\r\n\r\n    getFilmsTOP100(currentPage=1) {\r\n        return instance.get(`top?type=TOP_100_POPULAR_FILMS&page=${currentPage}`);\r\n    },\r\n    getAwaitFilms(currentPage) {\r\n        return instance.get(`top?type=TOP_AWAIT_FILMS&page=${currentPage}`);\r\n\r\n    },\r\n    getFilmsFromSearch(inputText, currentPage) {\r\n        return instance.get(\r\n            `search-by-keyword?keyword=${inputText}&page=${currentPage}`\r\n        );\r\n    },\r\n    getListGenreAndCountry (){\r\n        return instance.get(`filters`);\r\n    },\r\n    // return instance.get(`search-by-filters?order=YEAR&country=${idCountry}&genre=${idGenre}\r\n    //     &ratingFrom=${ratingFrom}&ratingTo=${ratingTo}&yearFrom=${yearFrom}&yearTo=${yearTo}&page=${currentPage}`)\r\n    getFilteredParams (filteredParams, currentPage){\r\n        console.log(filteredParams)\r\n        return instance.get(`search-by-filters?${filteredParams}&page=${currentPage}`)\r\n    },\r\n    getFilmsById(id){\r\n        return instance.get(`${id}`)\r\n    }\r\n};\r\n","import {filmsAPI} from \"../API/API\";\r\nimport {\r\n    SHOW_FILMS,\r\n    GET_GENRES,\r\n    HANDLER_INPUT,\r\n    HIDE_LOADING,\r\n    SHOW_LOADING,\r\n    SET_FAVOURITE_FILMS,\r\n    DELETE_FAVOURITE_FILMS,\r\n    SET_SELECTED_FILM_ID,\r\n    GET_VIDEO,\r\n    DELETE_SELECTED_FILM_ID, CHANGE_THEME,\r\n} from \"./typeAction\";\r\n\r\n\r\nexport const showLoading = () => ({type: SHOW_LOADING});\r\nexport const hideLoading = () => ({type: HIDE_LOADING});\r\n\r\nexport const handlerInput = (text) => ({type: HANDLER_INPUT, text});\r\n\r\nexport const setGenresAndCountries = (genres, countries) => ({\r\n    type: GET_GENRES,\r\n    genres: genres,\r\n    countries: countries\r\n});\r\n\r\nexport const setFilms = (films, pagesCount, currentPage) => ({\r\n    type: SHOW_FILMS,\r\n    payload: {\r\n        films,\r\n        pagesCount,\r\n        currentPage\r\n    }\r\n})\r\n\r\nexport const getTop100Films = (currentPage) => (dispatch) => {\r\n    dispatch(showLoading())\r\n    filmsAPI\r\n        .getFilmsTOP100(currentPage)\r\n        .then((response) => {\r\n            dispatch(setFilms(response.data.films, response.data.pagesCount, currentPage))\r\n            dispatch(hideLoading())\r\n        })\r\n        .catch(() => {\r\n            console.log(\"Error\");\r\n        });\r\n};\r\n\r\nexport const getAwaitFilms = (currentPage) => (dispatch) => {\r\n    dispatch(showLoading())\r\n    filmsAPI\r\n        .getAwaitFilms(currentPage)\r\n        .then((response) => {\r\n            dispatch(setFilms(response.data.films, response.data.pagesCount, currentPage))\r\n            dispatch(hideLoading())\r\n        })\r\n        .catch(() => {\r\n            console.log(\"Error\");\r\n        });\r\n};\r\n\r\nexport const getFilmsFromSearch = (query, currentPage) => (dispatch) => {\r\n    dispatch(showLoading())\r\n    filmsAPI\r\n        .getFilmsFromSearch(query, currentPage)\r\n        .then((response) => {\r\n            dispatch(setFilms(response.data.films, response.data.pagesCount, currentPage))\r\n            dispatch(hideLoading())\r\n        })\r\n        .catch(() => {\r\n            console.log(\"Error\");\r\n        });\r\n};\r\n\r\nexport const getGenreAndCountries  = () => (dispatch) => {\r\n    filmsAPI.getListGenreAndCountry().then((response) => {\r\n        dispatch(setGenresAndCountries(response.data.genres, response.data.countries));\r\n    });\r\n};\r\n\r\nexport const setFilteredParams = (filteredParams, currentPage = 1) => (dispatch) => {\r\n    dispatch(showLoading())\r\n    filmsAPI\r\n        .getFilteredParams(filteredParams, currentPage)\r\n        .then((response) => {\r\n            if (response.status === 200) {\r\n                dispatch(setFilms(response.data.films, response.data.pagesCount, currentPage))\r\n                dispatch(hideLoading())\r\n            }\r\n        })\r\n        .catch(() => {\r\n            dispatch(setFilms([]))\r\n            dispatch(hideLoading())\r\n    });\r\n};\r\n\r\nexport const setFavouritesFilms = (payload) => ({type: SET_FAVOURITE_FILMS, payload})\r\n\r\nexport const deleteFavouritesFilms = (payload) => ({type: DELETE_FAVOURITE_FILMS, payload})\r\n\r\nexport const setSelectedFilmById = (id) => (dispatch)=> {\r\n    dispatch(showLoading())\r\n    filmsAPI.getFilmsById(id).then((response) => {\r\n        dispatch(setSelectedFilmByIdAC(response.data.data));\r\n        dispatch(hideLoading())\r\n    });\r\n}\r\n\r\nexport const setSelectedFilmByIdAC = (payload) => ({type: SET_SELECTED_FILM_ID, payload})\r\n\r\nexport const deleteSelectedFilmById = () => ({type: DELETE_SELECTED_FILM_ID})\r\n\r\nexport const changeTheme = () => ({type: CHANGE_THEME})\r\n\r\n\r\n","export const darkThemeSelector = (state) => {\r\n    return state.theme.darkTheme\r\n}\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getGenreAndCountries} from \"../../Redux/actions\";\r\nimport {FilterOutlined, StarOutlined, CalendarOutlined, RocketOutlined, UpSquareOutlined} from '@ant-design/icons';\r\nimport {Slider, InputNumber, Row, Menu, Select, Button, Col} from 'antd';\r\nimport {Link} from \"react-router-dom\";\r\nimport {darkThemeSelector} from \"../../Redux/selectors\";\r\nconst {Option} = Select;\r\nconst {SubMenu} = Menu;\r\n\r\nconst Filter = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const genres = useSelector((state) => state.filter.genres);\r\n    const countries = useSelector((state) => state.filter.countries);\r\n    let currentTime = new Date()\r\n    let year = currentTime.getFullYear();\r\n    const darkTheme = useSelector(darkThemeSelector);\r\n    const [filteredParams, setFilteredParams] = useState([]);\r\n    const [selectedGenre, setSelectedGenre] = useState('')\r\n    const [selectedCountry, setSelectedCountry] = useState('')\r\n    const [selectedYear, setSelectedYear] = useState({min: 1880, max: year})\r\n    const [selectedRating, setSelectedRating] = useState({min: 0, max: 10})\r\n    const [order, setOrder] = useState()\r\n    const listSort = ['По году', 'По рейтингу']\r\n\r\n\r\n    const yearSliderOnChange = value => {\r\n        if (value[0] < value[1]) {\r\n            setSelectedYear({min: value[0], max: value[1]});\r\n        }\r\n    }\r\n    const yearInputMaxOnChange = value => {\r\n        if (selectedRating.min < value) {\r\n            setSelectedYear({...selectedYear, max: value});\r\n        }\r\n    }\r\n    const yearInputMinOnChange = value => {\r\n        if (selectedRating.max > value) {\r\n            setSelectedYear({...selectedYear, min: value});\r\n        }\r\n    }\r\n    const ratingSliderOnChange = value => {\r\n        if (value[0] < value[1]) {\r\n            setSelectedRating({min: value[0], max: value[1]});\r\n        }\r\n    }\r\n    const ratingInputMaxOnChange = value => {\r\n        if (selectedRating.min < value) {\r\n            setSelectedRating({...selectedRating, max: value});\r\n        }\r\n    }\r\n    const ratingInputMinOnChange = value => {\r\n        if (selectedRating.max > value) {\r\n            setSelectedRating({...selectedRating, min: value});\r\n        }\r\n    }\r\n    const onSortTypeChange = value => {\r\n        if (value === 'По году') setOrder('YEAR')\r\n        else if (value === 'По рейтингу') setOrder('RATING');\r\n    }\r\n    const onCountryChange = value => {\r\n        setSelectedCountry(value)\r\n    }\r\n    const onGenreChange = value => {\r\n        setSelectedGenre(value)\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(getGenreAndCountries());\r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n        setFilteredParams(prev => [...prev,\r\n            order && `order=${order}`,\r\n            selectedGenre && `&genre=${selectedGenre}`,\r\n            selectedCountry && `&country=${selectedCountry}`,\r\n            `&ratingFrom=${selectedRating.min}`,\r\n            `&ratingTo=${selectedRating.max}`,\r\n            `&yearFrom=${selectedYear.min}`,\r\n            `&yearTo=${selectedYear.max}`,\r\n        ])\r\n        return () => {\r\n            setFilteredParams([]);\r\n        }\r\n    }, [selectedGenre, selectedCountry, selectedRating, selectedYear, order])\r\n\r\n    return (\r\n        <>\r\n <Menu\r\n            mode=\"inline\"\r\n            theme={darkTheme ? 'dark' : 'light'}\r\n            style={{height: '100%'}}\r\n        >\r\n            <SubMenu key=\"sub1\" icon={<FilterOutlined/>} title=\"Жанры\">\r\n                <Select\r\n                    showSearch\r\n                    style={{width: '100%'}}\r\n                    placeholder=\"Выберите жанр\"\r\n                    optionFilterProp=\"children\"\r\n                    onChange={onGenreChange}\r\n                    listHeight={500}\r\n                    filterOption={(input, option) =>\r\n                        option.children.toLowerCase().indexOf(input.toLowerCase()) === 0\r\n                    }\r\n                >\r\n                    {genres.map((g) => {\r\n                        return (\r\n                            <Option\r\n                                key={g.id}\r\n\r\n                            >\r\n                                {g.genre}\r\n                            </Option>\r\n                        );\r\n                    })}\r\n                </Select>\r\n            </SubMenu>\r\n            <SubMenu key=\"sub2\" icon={<RocketOutlined/>} title=\"Страны\">\r\n                <Select\r\n                    showSearch\r\n                    style={{width: '100%'}}\r\n                    listHeight={500}\r\n                    placeholder=\"Введите название страны\"\r\n                    optionFilterProp=\"children\"\r\n                    onChange={onCountryChange}\r\n                    filterOption={(input, option) =>\r\n                        option.children.toLowerCase().indexOf(input.toLowerCase()) === 0\r\n                    }\r\n                >\r\n                    {countries.map((c) => {\r\n                        return (\r\n                            <Option\r\n                                key={c.id}\r\n                                value={c.id}\r\n                            >\r\n                                {c.country}\r\n                            </Option>\r\n                        );\r\n                    })}\r\n                </Select>\r\n            </SubMenu>\r\n            <SubMenu key=\"sub3\" icon={<CalendarOutlined/>} title=\"Год\">\r\n                <Slider min={1880} max={year}\r\n                        style={{paddingLeft: 5}}\r\n                        trackStyle={{backgroundColor: 'red', height: 20}}\r\n                        handleStyle={{borderColor: 'red', height: 20}}\r\n                        range={true}\r\n                        onChange={yearSliderOnChange}\r\n                        defaultValue={[selectedYear.min, selectedYear.max]}\r\n                        value={[selectedYear.min, selectedYear.max]}\r\n                />\r\n                <Row justify=\"space-around\" align=\"middle\" style={{paddingLeft: 5, paddingRight: 5, paddingBottom: 15}}>\r\n                    <InputNumber\r\n                        className=\"min-input-main\"\r\n                        min={1880}\r\n                        max={year}\r\n                        value={selectedYear.min}\r\n                        onChange={yearInputMinOnChange}\r\n                    />\r\n                    <div> до</div>\r\n                    <InputNumber\r\n                        className=\"min-input-main\"\r\n                        min={1880}\r\n                        max={year}\r\n                        value={selectedYear.max}\r\n                        onChange={yearInputMaxOnChange}\r\n                    />\r\n                </Row>\r\n            </SubMenu>\r\n            <SubMenu key=\"sub4\" icon={<StarOutlined/>} title=\"Рейтинг\">\r\n                <Slider min={0} max={10}\r\n                        style={{paddingLeft: 5}}\r\n                        trackStyle={{backgroundColor: 'red', height: 20}}\r\n                        handleStyle={{borderColor: 'red', height: 20}}\r\n                        range={true}\r\n                        onChange={ratingSliderOnChange}\r\n                        defaultValue={[selectedRating.min, selectedRating.max]}\r\n                        value={[selectedRating.min, selectedRating.max]}\r\n                />\r\n                <Row justify=\"space-around\" align=\"middle\" style={{paddingLeft: 5, paddingRight: 5, paddingBottom: 15}}>\r\n                    <InputNumber\r\n                        className=\"min-input-main\"\r\n                        min={0}\r\n                        max={10}\r\n                        value={selectedRating.min}\r\n                        onChange={ratingInputMinOnChange}\r\n                    />\r\n                    <div> до</div>\r\n                    <InputNumber\r\n                        className=\"min-input-main\"\r\n                        min={0}\r\n                        max={10}\r\n                        value={selectedRating.max}\r\n                        onChange={ratingInputMaxOnChange}\r\n                    />\r\n                </Row>\r\n            </SubMenu>\r\n            <SubMenu key=\"sub5\" icon={<UpSquareOutlined/>} title=\"Сортирвока\">\r\n                <Select style={{width: '100%'}} defaultValue={'По году'} onChange={onSortTypeChange}>\r\n                    {\r\n                        listSort.map(el => (\r\n                            <Option key={el}>{el}</Option>\r\n                        ))\r\n                    }\r\n                </Select>\r\n            </SubMenu>\r\n            <Row justify={'center'} style={{marginTop: 10}}>\r\n                <Button type={darkTheme && \"primary\"} block><Link\r\n                    to={`/films/${filteredParams.join('')}`}>Отфильтровать</Link></Button>\r\n            </Row>\r\n        </Menu>\r\n\r\n    </>\r\n    );\r\n\r\n\r\n};\r\n\r\nexport default Filter;\r\n\r\n","import React from \"react\";\r\nimport { Spin } from 'antd';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\nimport style from './preloader.module.css'\r\nexport const Preloader = () => {\r\n    const antIcon = <LoadingOutlined style={{ fontSize: 156 }} spin />;\r\n    return (\r\n        <div className={style.preloader}>\r\n            <Spin indicator={antIcon} />\r\n        </div>\r\n\r\n    );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/defaultMovieImage.6bef6ac0.jpg\";","import {Link, NavLink} from \"react-router-dom\";\r\nimport {deleteFavouritesFilms, setFavouritesFilms} from \"../../Redux/actions\";\r\nimport React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport './films.css'\r\nimport {Button, Card, Image} from 'antd';\r\nimport './../../Dark.css'\r\nimport {darkThemeSelector} from \"../../Redux/selectors\";\r\nimport img from './../../assets/img/defaultMovieImage.jpg'\r\nconst {Meta} = Card;\r\n\r\nexport const CardFilm = ({film, filmId, nameRu, posterUrlPreview, favouriteFilms, rating}) => {\r\n    const dispatch = useDispatch();\r\n    const darkTheme = useSelector(darkThemeSelector);\r\n    return (\r\n        <article className=\"grid-item\">\r\n            <div className=\"image\">\r\n               <Link to={`/cinemaInfo/${filmId}`}><img src={posterUrlPreview || img} /></Link>\r\n            </div>\r\n            <div className={darkTheme ? \"info infoDark\" : \"info\"}>\r\n                <h2>{nameRu}</h2>\r\n                <div className=\"info-text\">\r\n                          {\r\n                                    favouriteFilms.some((item) => item.filmId === filmId) ?\r\n                                        <Button\r\n                                            danger\r\n                                            block\r\n                                            ghost\r\n                                            type={darkTheme ? \"dashed\":\"primary\"}\r\n                                            lime-7\r\n                                            className={'btn'}\r\n                                            onClick={() => dispatch(deleteFavouritesFilms(film))}>\r\n                                            Удалить из избранного\r\n                                        </Button> :\r\n                                        <Button\r\n                                            block\r\n                                            primary\r\n                                            ghost\r\n                                            type={darkTheme ? \"dashed\":\"primary\"}\r\n                                            onClick={() => dispatch(setFavouritesFilms(film))}>\r\n                                            Добавить в избранное\r\n                                        </Button>\r\n                               }\r\n                </div>\r\n            </div>\r\n        </article>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getTop100Films} from \"../../Redux/actions\";\r\nimport {Preloader} from \"../Loader/Preloader\";\r\nimport {CardFilm} from \"./CardFilm\";\r\nimport {Card, Col, Pagination, Row} from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport {darkThemeSelector} from \"../../Redux/selectors\";\r\n\r\n\r\nconst Films = ({films, currentPage, pagesCount, onPageChanged}) => {\r\n\r\n    console.log('Render Films')\r\n    const selectRating = (raiting) => {\r\n        if (raiting >= 9) return \"green\";\r\n        else if (raiting >= 7) return \"yellow\"\r\n        else if (raiting >= 5) return \"orange\";\r\n        else return \"red\";\r\n    }\r\n    if(pagesCount > 20) pagesCount = 20\r\n    const favouriteFilms = useSelector((state) => state.favouriteFilms.favouriteFilms)\r\n    const isLoading = useSelector(state => state.films.isLoading)\r\n    const darkTheme = useSelector(darkThemeSelector);\r\n    if (films.length === 0) {\r\n        return <h2 className={darkTheme ? 'warningText warningTextDark': 'warningText'}>По вашему запросу ничего не найдено!</h2>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <section className={'grid'} >\r\n            { isLoading ?  <Preloader /> :\r\n                films.map((f) => (\r\n                          // <Col key={f.filmId}  style={{padding: 10}} xs={24} sm={12} md={8} lg={6} xl={4}>\r\n                              <CardFilm\r\n                                  filmId={f.filmId}\r\n                                  film={f}\r\n                                  nameRu={f.nameRu}\r\n                                  posterUrlPreview={f.posterUrlPreview}\r\n                                  favouriteFilms={favouriteFilms}\r\n                                  rating={f.rating}\r\n                              />\r\n                          // </Col>\r\n                      ))}\r\n            </section>\r\n                <Row justify={'center'}>\r\n                    <Col style={{paddingTop: 70, paddingBottom: 70}}>\r\n                        <Pagination total={pagesCount*10} showSizeChanger={false}\r\n                                    defaultCurrent={currentPage} onChange={onPageChanged}/>\r\n                    </Col>\r\n                </Row>\r\n\r\n        </div>\r\n    );\r\n}\r\nexport default Films\r\n","import React, {memo, useEffect} from \"react\";\r\nimport Films from \"../Films/Films\";\r\n\r\nimport {useParams} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setFilteredParams} from \"../../Redux/actions\";\r\n\r\nconst SortFilmsGenres = () => {\r\n\r\n    const pagesCount = useSelector(state=>state.films.pagesCount);\r\n    const currentPage = useSelector(state=>state.films.currentPage);\r\n    const films = useSelector(state=>state.films.films);\r\n\r\n    const {filteredParams} = useParams();\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(()=>{\r\n        console.log(\"Screening of films by genre \")\r\n        dispatch(setFilteredParams(filteredParams))\r\n    },[filteredParams])\r\n\r\n    const onPageChanged = (pageNumber) => {\r\n        dispatch(setFilteredParams(filteredParams, pageNumber));\r\n    };\r\n\r\n    return (\r\n        <div className=\"container pt-5\">\r\n            <Films\r\n                films={films}\r\n                onPageChanged={onPageChanged}\r\n                pagesCount={pagesCount}\r\n                currentPage={currentPage}/>\r\n        </div>\r\n    );\r\n};\r\nexport default SortFilmsGenres;\r\n","import Films from \"../Films/Films\";\r\nimport {getFilmsFromSearch} from \"../../Redux/actions\";\r\nimport { useDispatch, useSelector} from \"react-redux\";\r\n\r\nimport React, {memo, useEffect} from \"react\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\nexport const ShowOnSearchFilms = (props) => {\r\n\r\n    const {name} = useParams();\r\n    const films = useSelector(state=> state.films.films)\r\n    const pagesCount = useSelector(state=> state.films.pagesCount)\r\n    const currentPage = useSelector(state=> state.films.currentPage)\r\n    const searchTest = useSelector(state=> state.header.searchTest);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(()=>{\r\n        dispatch(getFilmsFromSearch(name, 1));\r\n    },[dispatch,name])\r\n\r\n    let onPageChanged = (pageNumber) => {\r\n        dispatch(getFilmsFromSearch(searchTest, pageNumber));\r\n    };\r\n\r\n    console.log('Render Show Films By Search');\r\n    return (\r\n        <div className=\"container pt-5\">\r\n            <Films\r\n                films={films}\r\n                onPageChanged={onPageChanged}\r\n                pagesCount={pagesCount}\r\n                currentPage={currentPage}/>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n","import React, {memo, useEffect} from \"react\";\r\nimport Films from \"../Films/Films\";\r\n\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getAwaitFilms} from \"../../Redux/actions\";\r\n\r\nexport const FilmsAwaitFilms = () => {\r\n    console.log('Render start page')\r\n\r\n\r\n    const pagesCount = useSelector(state => state.films.pagesCount);\r\n    const currentPage = useSelector(state => state.films.currentPage);\r\n    const films = useSelector(state => state.films.films);\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getAwaitFilms(currentPage));\r\n    }, [dispatch, currentPage])\r\n\r\n    const onPageChanged = (pageNumber) => {\r\n        dispatch(getAwaitFilms(pageNumber));\r\n    };\r\n\r\n    return (\r\n        <div className=\"container p-5\">\r\n            <Films\r\n                films={films}\r\n                onPageChanged={onPageChanged}\r\n                pagesCount={pagesCount}\r\n                currentPage={currentPage}/>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {memo, useEffect} from \"react\";\r\nimport Films from \"../Films/Films\";\r\nimport {getTop100Films} from \"../../Redux/actions\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Preloader} from \"../Loader/Preloader\";\r\n\r\nexport const FilmsTop100 = () => {\r\n    console.log('Render Top 100')\r\n    const currentPage = useSelector(state => state.films.currentPage)\r\n    const pagesCount = useSelector(state => state.films.pagesCount)\r\n    const films = useSelector(state => state.films.films)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(()=>{\r\n        dispatch(getTop100Films(currentPage))\r\n    },[currentPage])\r\n\r\n    const onPageChanged = (pageNumber) => {\r\n        dispatch(getTop100Films(pageNumber))\r\n    };\r\n    return (\r\n            <div className=\"container pt-5\">\r\n                    <Films\r\n                        films={films}\r\n                        onPageChanged={onPageChanged}\r\n                        pagesCount={pagesCount}\r\n                        currentPage={currentPage}/>\r\n            </div>\r\n    );\r\n};\r\n\r\n","import React, {useEffect} from \"react\";\r\nimport './descriptionFilm.css'\r\nimport {useParams} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {deleteSelectedFilmById, setSelectedFilmById} from \"../../Redux/actions\";\r\nimport {Preloader} from \"../Loader/Preloader\";\r\nimport {Col, Image, Rate, Row} from \"antd\";\r\nimport {darkThemeSelector} from \"../../Redux/selectors\";\r\n\r\nconst DescriptionFilm = () => {\r\n    const {id} = useParams();\r\n    const dispatch = useDispatch();\r\n    const selectedFilm = useSelector(state => state.films.selectedMovie);\r\n    const isLoading = useSelector(state => state.films.isLoading)\r\n    const darkTheme = useSelector(darkThemeSelector);\r\n\r\n    useEffect(() => {\r\n        dispatch(setSelectedFilmById(id))\r\n        return ()=>{\r\n            dispatch(deleteSelectedFilmById())\r\n        }\r\n    }, [id])\r\n\r\n    return (\r\n        <Row className=\"movie_top\">\r\n            {\r\n                isLoading ? <Preloader/> : selectedFilm && <div>\r\n                    <Row style={{padding: '115px  0 0 32px'}}>\r\n                        <Col  md={10} lg={10} xl={6}>\r\n                            <Image src={selectedFilm.posterUrl} width={250}/>\r\n                        </Col>\r\n                        <Col md={14} lg={14} xl={18}>\r\n                            <p className={darkTheme ? \"movie_option movie_optionDark\" : \"movie_option\"}><strong>Название: </strong>{selectedFilm.nameRu}</p>\r\n                            <p className={darkTheme ? \"movie_option movie_optionDark\" : \"movie_option\"}><strong>Слоган\r\n                                ограничения: </strong>{selectedFilm.slogan || 'Без слогана'}</p>\r\n                            <p className={darkTheme ? \"movie_option movie_optionDark\" : \"movie_option\"}><strong>Продолжительность: </strong>{selectedFilm.filmLength}\r\n                            </p>\r\n                            <p className={darkTheme ? \"movie_option movie_optionDark\" : \"movie_option\"}><strong>Страна: </strong>{selectedFilm.countries.map(c =>\r\n                                <span>{c.country} </span>)}</p>\r\n                            <p className={darkTheme ? \"movie_option movie_optionDark\" : \"movie_option\"}><strong>Год: </strong>{selectedFilm.year}</p>\r\n                            <p className={darkTheme ? \"movie_option movie_optionDark\" : \"movie_option\"}><strong>Жанр: </strong>{selectedFilm.genres.map(g =>\r\n                                <span>{g.genre} </span>)}</p>\r\n                            <p className={darkTheme ? \"movie_option movie_optionDark\" : \"movie_option\"}><strong>Возратсные\r\n                                ограничения: </strong>{selectedFilm.ratingAgeLimits}+</p>\r\n\r\n                        </Col>\r\n                    </Row>\r\n                    <Row justify={'center'}>\r\n                        <Col span={23}>\r\n                            <p className={darkTheme ? \"description descriptionDark\" : \"description\"}>{selectedFilm.description}</p>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                </div>\r\n\r\n            }\r\n        </Row>\r\n    )\r\n}\r\nexport default DescriptionFilm\r\n","import React, {memo, useEffect} from \"react\";\r\nimport Films from \"../Films/Films\";\r\n// import { Pagination } from \"../Pagination/Pagination\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nexport const FavouriteFilms = () => {\r\n    const favouriteFilms = useSelector(state => state.favouriteFilms.favouriteFilms)\r\n    const dispatch = useDispatch();\r\n\r\n    const onPageChanged = (pageNumber) => {\r\n        //dispatch(getTop100Films(pageNumber))\r\n    };\r\n    return (\r\n        <div className=\"container pt-5\">\r\n            <Films films={favouriteFilms} pagesCount={1}/>\r\n        </div>\r\n    );\r\n};\r\n\r\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useState} from \"react\";\r\nimport './header.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useHistory} from \"react-router\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {changeTheme, handlerInput} from \"../../Redux/actions\";\r\nimport {Col, Layout, Row, Input, Tooltip, Button, Switch, Form, Menu, Typography, Badge} from \"antd\";\r\nimport 'antd/dist/antd.css';\r\nimport { darkThemeSelector} from \"../../Redux/selectors\";\r\nimport './header.css'\r\nimport logo from \"../../logo.svg\";\r\nimport { MenuOutlined } from '@ant-design/icons'\r\n\r\nexport const Header = () => {\r\n\r\n    console.log('Render Header')\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const {Header} = Layout;\r\n    const [searchValue, setSearchValue] = useState('');\r\n    const darkTheme = useSelector(darkThemeSelector);\r\n    const favouriteFilms = useSelector(state => state.favouriteFilms.favouriteFilms)\r\n    const onSearch = () => {\r\n        dispatch(handlerInput(searchValue));\r\n        history.push(`/film/${searchValue}`)\r\n    };\r\n    return (\r\n        <Row justify='space-between' style={{ position: 'fixed', zIndex: 145, width: '100%' }}>\r\n            <Col xl={24} lg={24} md={24} sm={24} xs={24}>\r\n                <Header className={!darkTheme && 'headerFixed'}>\r\n                    <Row>\r\n\r\n                        <Col xl={12} lg={12} md={12} sm={4} xs={4}>\r\n                            <Menu\r\n                                theme={darkTheme ? 'dark' : 'light'}\r\n                                mode='horizontal'\r\n                                defaultSelectedKeys={[\"item1\"]}\r\n                                overflowedIndicator={<MenuOutlined />}\r\n                            >\r\n                                <Menu.Item key=\"1\">\r\n                                    <Link to=\"/top100\" className=\"btn btn-primary\">100 лучших фильмов</Link>\r\n                                </Menu.Item>\r\n                                <Menu.Item key=\"2\">\r\n\r\n                                        <Link to=\"/favourite\" className=\"btn btn-primary\">\r\n                                            <Badge count={favouriteFilms.length} offset={[-1, -10]}>\r\n                                              <span className={darkTheme ? 'textBadge textBadgeDark':'textBadge'}>Мои любимые фильмы</span>\r\n                                            </Badge>\r\n                                        </Link>\r\n                                </Menu.Item>\r\n                                <Menu.Item key=\"3\">\r\n                                    <label htmlFor={'theme'}\r\n                                           className={darkTheme ? 'textThemeDark' : 'textTheme'}>{!darkTheme ? 'Темная тема:' : 'Светлая тема:'} </label>\r\n                                    <Switch id='theme' size=\"small\" checked={darkTheme}\r\n                                            onChange={() => dispatch(changeTheme())}/>\r\n                                </Menu.Item>\r\n                            </Menu>\r\n                        </Col>\r\n                        <Col xl={12} lg={12} md={12} sm={20} xs={20}>\r\n                            <Form onFinish={onSearch}>\r\n                                <Input  onChange={(e)=>setSearchValue(e.target.value)} placeholder=\"Введите название фильма\"\r\n                                        className={darkTheme ? 'inputSearch inputSearchDark' : 'inputSearch'}/>\r\n                                <div className={darkTheme ? 'search searchDark' : 'search'}></div>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Header>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\n\r\n","import React, {memo, useEffect, useState} from \"react\";\nimport {HashRouter as Router, Link, Route, Switch} from \"react-router-dom\";\nimport Filter from \"./Components/Filter/Filter\";\nimport SortFilmsOnGenre from \"./Components/ShowFilms/SortFilmsOnGenre\";\nimport {ShowOnSearchFilms} from \"./Components/ShowFilms/ShowOnSearchFilms\";\nimport { FilterOutlined } from '@ant-design/icons';\nimport {FilmsAwaitFilms} from \"./Components/ShowFilms/FilmsAwaitFilms\";\nimport {FilmsTop100} from \"./Components/ShowFilms/FilmsTop100\";\nimport DescriptionFilm from \"./Components/DescriptionFilm/DescriptionFilm\";\nimport {FavouriteFilms} from \"./Components/ShowFilms/FavoutiteFilms\";\nimport {Layout, Menu, Breadcrumb, Col, Row} from 'antd';\nimport {useSelector} from \"react-redux\";\nimport {darkThemeSelector} from \"./Redux/selectors\";\nimport './Dark.css'\nimport {Header} from \"./Components/Header/Header\";\n\n\nconst MemoShowOnSearchFilms = memo(ShowOnSearchFilms);\nconst MemoFilmsTop100 = memo(FilmsTop100)\nconst MemoFilmsAwaitFilms= memo(FilmsAwaitFilms)\nconst MemoFavouriteFilms = memo(FavouriteFilms)\nconst MemoDescriptionFilm = memo(DescriptionFilm)\nconst MemoSortFilmsOnGenre = memo(SortFilmsOnGenre)\n\n\nconst { SubMenu } = Menu;\nconst { Content, Footer, Sider } = Layout;\n\n\nconst App = () => {\n  const darkTheme = useSelector(darkThemeSelector);\n    const [matchesMedia, setMatchesMedia] = useState(window.matchMedia(\"(min-width: 992px)\").matches);\n    useEffect(()=>{\n        const handler = e => setMatchesMedia(e.matches);\n        window.matchMedia(\"(min-width: 992px)\").addEventListener('change', handler);\n    }, [matchesMedia])\n\n  console.log(\"Render App\")\n  return (\n      <Router>\n        <Layout style={{minHeight: '100vh' }}>\n            <Header />\n\n          <Content style={{}} className={darkTheme && 'layout_content_dark'} >\n            {/*<Breadcrumb style={{ margin: '16px 0' }}>*/}\n            {/*    <Breadcrumb.Item><Link to={'/'}>Главная</Link></Breadcrumb.Item>*/}\n            {/*  /!*<Breadcrumb.Item>App</Breadcrumb.Item>*!/*/}\n            {/*</Breadcrumb>*/}\n              <Row >\n                <Col xs={1} sm={1} md={1} lg={6} xl={6} style={{zIndex: 9}}>\n                    <Layout style={{\n                        background: 'transparent',\n                        position: 'sticky',\n                        top: 0,\n                        left: 0,\n                    }}>\n                        <Sider\n                            style={{\n                                height: '100vh',\n                                position: 'absolute',\n                                left: 0,\n                                top: 64,\n                                zIndex: 2,\n\n                            }}\n                              className=\"site-layout-background\" width={matchesMedia ? '100%': 300} trigger={<FilterOutlined />}\n                               breakpoint=\"lg\"\n                               collapsedWidth=\"0\">\n                            <Filter />\n                        </Sider>\n                    </Layout>\n                </Col>\n                <Col xs={23} sm={23} md={23} lg={18} xl={18}>\n                    <Layout className=\"site-layout-background\" >\n\n                        <Content style={{ minHeight: 280 }} className={darkTheme && 'contentDark'}>\n                            <Switch>\n                                <Route exact path={\"/\"} component={MemoFilmsAwaitFilms} />\n                                <Route path={\"/favourite\"} component={MemoFavouriteFilms} />\n                                <Route path={\"/cinemaInfo/:id\"} render={() => <MemoDescriptionFilm/>} />\n                                <Route path=\"/film/:name\" component={MemoShowOnSearchFilms}/>\n                                <Route path=\"/films/:filteredParams\" component={MemoSortFilmsOnGenre} />\n                                <Route path=\"/top100\" render={() => <MemoFilmsTop100/>} />\n                            </Switch>\n                        </Content>\n                    </Layout>\n                </Col>\n            </Row>\n\n\n          </Content>\n        </Layout>\n      </Router>\n\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"../src/Redux/storeRedux\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from 'redux-persist/integration/react'\nimport {persistor} from \"./Redux/storeRedux\";\nimport {HashRouter} from \"react-router-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <HashRouter  >\n        <Provider store={store}>\n            <PersistGate  persistor={persistor}>\n                <App />\n            </PersistGate>\n        </Provider>\n    </HashRouter>,\n    document.getElementById(\"root\")\n\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}